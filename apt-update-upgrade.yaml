---
# Simple playbook to update and upgrade all hosts
# Run with: ansible-playbook -i inventory/nodes.ini apt-update-upgrade.yaml
# 
# To automatically reboot if needed, add: -e "perform_reboot=yes"
# Example: ansible-playbook -i inventory/nodes.ini apt-update-upgrade.yaml -e "perform_reboot=yes"

- name: Update and upgrade all hosts
  hosts: all
  become: true
  gather_facts: true
  
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      
    - name: Upgrade all packages
      apt:
        upgrade: yes
        update_cache: no
        cache_valid_time: 3600
        autoremove: yes
      register: upgrade_result
      
    - name: Show upgrade results
      debug:
        msg: "{{ upgrade_result.stdout_lines | default(['No changes made']) }}"
      when: upgrade_result.stdout_lines is defined
      
    - name: Show if system requires a reboot
      stat:
        path: /var/run/reboot-required
      register: reboot_required
      
    - name: Notify if reboot is required
      debug:
        msg: "System requires a reboot"
      when: reboot_required.stat.exists
      
    - name: Prompt for reboot
      pause:
        prompt: "Would you like to reboot the hosts that require it? (yes/no)"
      register: reboot_prompt
      delegate_to: localhost
      run_once: true
      when: reboot_required.stat.exists and perform_reboot is not defined
      
    - name: Set fact from user input
      set_fact:
        do_reboot: "{{ (reboot_prompt.user_input | default('no') | lower == 'yes') or (perform_reboot | default('no') | lower == 'yes') }}"
      when: reboot_required.stat.exists
      
    - name: Reboot the system if required
      reboot:
        msg: "Reboot initiated by Ansible due to package upgrades"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required.stat.exists and do_reboot | bool
