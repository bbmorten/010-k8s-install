---
- name: Install nerdctl and setup registry on control plane
  hosts: control_plane
  become: true
  tasks:
    - name: Check if nerdctl is already installed
      command: which nerdctl
      register: nerdctl_check
      failed_when: false
      changed_when: false

    - name: Download nerdctl binary
      get_url:
        url: https://github.com/containerd/nerdctl/releases/download/v1.6.2/nerdctl-1.6.2-linux-amd64.tar.gz
        dest: /tmp/nerdctl.tar.gz
        mode: '0644'
      when: nerdctl_check.rc != 0

    - name: Create directory for nerdctl extraction
      file:
        path: /tmp/nerdctl
        state: directory
        mode: '0755'
      when: nerdctl_check.rc != 0

    - name: Extract nerdctl
      unarchive:
        src: /tmp/nerdctl.tar.gz
        dest: /tmp/nerdctl
        remote_src: yes
      when: nerdctl_check.rc != 0

    - name: Install nerdctl
      copy:
        src: /tmp/nerdctl/nerdctl
        dest: /usr/local/bin/nerdctl
        mode: '0755'
        remote_src: yes
      when: nerdctl_check.rc != 0

    - name: Run registry container
      command: nerdctl run -d -p 5000:5000 --name registry registry:2
      register: registry_run
      failed_when: false
      changed_when: registry_run.rc == 0

    - name: Check if registry container is already running
      command: nerdctl ps --filter name=registry
      register: registry_ps
      changed_when: false
      failed_when: false

    - name: Handle already running registry
      debug:
        msg: "Registry container is already running"
      when: "'registry' in registry_ps.stdout"

- name: Configure insecure registry access
  hosts: k8s_cluster
  become: true
  vars:
    registry_host: "{{ hostvars[groups['control_plane'][0]]['ansible_host'] }}:5000"
    timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
  handlers:
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted
        daemon_reload: yes
  tasks:
    - name: Check if containerd config exists
      stat:
        path: /etc/containerd/config.toml
      register: containerd_config

    - name: Backup containerd config
      copy:
        src: /etc/containerd/config.toml
        dest: "/etc/containerd/config.toml.{{ timestamp }}"
        remote_src: yes
      when: containerd_config.stat.exists

    - name: Get default containerd config if it doesn't exist
      command: containerd config default
      register: default_config
      when: not containerd_config.stat.exists

    - name: Create containerd config if it doesn't exist
      copy:
        content: "{{ default_config.stdout }}"
        dest: /etc/containerd/config.toml
      when: not containerd_config.stat.exists

    - name: Check current containerd configuration
      command: cat /etc/containerd/config.toml
      register: containerd_config_content
      changed_when: false
      
    - name: Create a temporary file with current config
      copy:
        content: "{{ containerd_config_content.stdout }}"
        dest: "/tmp/containerd_config.toml.{{ timestamp }}"
      
    - name: Configure insecure registry - safer approach
      shell: |
        cat > /tmp/registry_config.toml << 'EOF'
        version = 2

        [plugins."io.containerd.grpc.v1.cri".registry]
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ registry_host }}"]
              endpoint = ["http://{{ registry_host }}"]
          [plugins."io.containerd.grpc.v1.cri".registry.configs]
            [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ registry_host }}"]
              [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ registry_host }}".tls]
                insecure_skip_verify = true
        EOF
        
        containerd config default > /etc/containerd/config.toml.new
        sed -i 's/\[plugins."io.containerd.grpc.v1.cri".registry\]//' /etc/containerd/config.toml.new
        cat /tmp/registry_config.toml >> /etc/containerd/config.toml.new
        mv /etc/containerd/config.toml.new /etc/containerd/config.toml

    - name: Validate the configuration before applying
      command: containerd config validate /etc/containerd/config.toml
      register: validate_result
      failed_when: false
      changed_when: false
      
    - name: Debug validation result
      debug:
        msg: "Config validation output: {{ validate_result.stdout | default('') }} {{ validate_result.stderr | default('') }}"
      
    - name: Apply configuration if valid
      command: echo "Configuration is valid, applying changes"
      when: validate_result.rc == 0
      notify: restart containerd
      
    - name: Revert to backup if validation failed
      block:
        - name: Restore previous configuration
          copy:
            src: "/etc/containerd/config.toml.{{ timestamp }}"
            dest: /etc/containerd/config.toml
            remote_src: yes
          when: validate_result.rc != 0 and containerd_config.stat.exists
          
        - name: Alert about validation failure
          debug:
            msg: "Configuration validation failed. Reverted to backup. Please check the containerd configuration format."
          when: validate_result.rc != 0